#include "display/display.h"
#include "battery.h"
#include "display/Font.h"
#include "display/SSD1306.h"
#include "display/UIHandler.h"
#include "experiments/dynamics.h"
#include "experiments/energy.h"
#include "experiments/fluid.h"
#include "experiments/gravity.h"
#include "experiments/sound.h"
#include "projdefs.h"
#include "setting/setting.h"
#include "task.h"
#include "util.h"
#include <cmath>
#include <cstdint>
#include <hardware/timer.h>
#include <pico/time.h>
#include <string>

#include "experiments/kinematics.h"
#include "keypad/keypad.h"
// #include "experiments/dynamics.h"
// #include "experiments/gravity.h"
// #include "experiments/fluid.h"
// #include "experiments/sound.h"
// #include "experiments/energy.h"

#define SCREEN_WIDTH 128 // OLED display width, in pixels
#define SCREEN_HEIGHT 64 // OLED display height, in pixels
#define PI 3.14159265359
// #define OLED_RESET -1       // Reset pin # (or -1 if sharing Arduino reset
// pin) #define SCREEN_ADDRESS 0x3C ///< See datasheet for Address; 0x3D for
// 128x64, 0x3C for 128x32 Adafruit_SSD1306 display(SCREEN_WIDTH, SCREEN_HEIGHT,
// &Wire, OLED_RESET);
//
#define LOGO2_HEIGHT 64
#define LOGO2_WIDTH 128
uint32_t millis() { return xTaskGetTickCount() * portTICK_PERIOD_MS; }
uint32_t millis_nortos() { return time_us_64() / 1000; }
const unsigned char logo_bmp[] = {

    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x0c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0e, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f,
    0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x0f, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0xe0, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07,
    0xf8, 0x00, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x03, 0xfc, 0x01, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0xfc, 0x03, 0x80, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01,
    0xfe, 0x07, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x03, 0x81, 0xfe, 0x0f, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xfc, 0x7e, 0x1f, 0x80, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7f, 0xfe,
    0x1f, 0x1f, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x01, 0xff, 0xfe, 0x0f, 0x1f, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0xff, 0xf0, 0x03, 0xbf, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0xff, 0xc0,
    0x00, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x01, 0xff, 0x00, 0x00, 0x7f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x80, 0x00, 0x7f, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x80,
    0x00, 0x7e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x03, 0x80, 0x00, 0x7c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0x80, 0x00, 0x7c, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0x80,
    0x00, 0x78, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x1f, 0x80, 0x00, 0x70, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1f, 0x80, 0x00, 0x60, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3f, 0x80,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x3f, 0x80, 0x00, 0x7f, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3f, 0xc0, 0x00, 0xff, 0xf8, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3f, 0x38,
    0x07, 0xff, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x3f, 0x3c, 0x1f, 0xff, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3e, 0x1f, 0x3f, 0xff, 0x80, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7e, 0x1f,
    0x87, 0xfc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x7c, 0x1f, 0xc0, 0x70, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x78, 0x0f, 0xe0, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x70, 0x0f,
    0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x60, 0x0f, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0xf8, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01,
    0xfc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0xfc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3c, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x1c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00

};

bool getPixelFromBitmap(uint16_t x, uint16_t y) {
  uint16_t byteWidth = (LOGO2_WIDTH + 7) / 8;
  uint8_t byte = logo_bmp[y * byteWidth + x / 8];
  return (byte >> (7 - (x % 8))) & 0x01;
}

void drawCenteredText(GFX *display, const char *text, int y,
                      uint8_t textSize = 1) {

  // Width of each character is approx 6 pixels at size 1
  int16_t charWidth = 6 * textSize;
  int16_t textWidth = std::string(text).length() * charWidth;

  // X coordinate for centering
  int16_t x = (SCREEN_WIDTH - textWidth) / 2;

  display->draw_string(x, y, text);
}
void delay(uint32_t ms) {
  volatile uint64_t t = millis_nortos();
  while (millis() < t + ms)
    ;
}
void splash_screen(GFX *display, float degrees) {
  display->clear();

  float radians = degrees * (PI / 180.0);
  int16_t cx = LOGO2_WIDTH / 2;
  int16_t cy = LOGO2_HEIGHT / 2;

  // Shift up to leave space for text below
  int16_t drawCX = SCREEN_WIDTH / 2;
  int16_t drawCY = SCREEN_HEIGHT / 2 - 10;

  for (uint16_t y = 0; y < LOGO2_HEIGHT; y++) {
    for (uint16_t x = 0; x < LOGO2_WIDTH; x++) {
      if (getPixelFromBitmap(x, y)) {
        int16_t x0 = x - cx;
        int16_t y0 = y - cy;

        int16_t xr = round(cos(radians) * x0 - sin(radians) * y0);
        int16_t yr = round(sin(radians) * x0 + cos(radians) * y0);

        int16_t drawX = drawCX + xr;
        int16_t drawY = drawCY + yr;

        if (drawX >= 0 && drawX < SCREEN_WIDTH && drawY >= 0 &&
            drawY < SCREEN_HEIGHT) {
          display->draw_pixel(drawX, drawY);
        }
      }
    }
  }

  drawCenteredText(display, "NAVROBOTEC", SCREEN_HEIGHT - 18);
  drawCenteredText(display, "STEM GUN", SCREEN_HEIGHT - 8);
}

void init_display(void *params) {
  Display_Param *display_param = (Display_Param *)params;

  display_param->display = UIHandler::get_ui_handler();
  GFX *gfx = (GFX *)display_param->display->gfx;
  gfx->clear();
  int angle = 0;
  for (int i = 0; i < 100; i += 1) {
    gfx->display();
    angle += 5.0;
    splash_screen(gfx, angle);
    if (angle >= 360.0)
      angle -= 360.0;

    sleep_ms(10);
    // vTaskDelay(pdMS_TO_TICKS(10));
  }
  sleep_ms(100);
  // vTaskDelay(pdMS_TO_TICKS(100));
  return;
}

void draw_status_bar(GFX *display, const char *title) {
  // Draw background bar
  display->draw_fill_rectangle(0, 0, SCREEN_WIDTH, 10);

  // Title text
  display->draw_string(2, 1, title, Colors::BLACK);

  float battery = get_battery_percentage();
  if (battery <= 100) {
    display->draw_string(110, 1, std::to_string((int)battery), Colors::BLACK);
    display->draw_symbol(122, 1, AMPERSENT_SYMBOL, Colors::BLACK);
  } else {
    display->draw_symbol(103, 1, LIGHTING_SYMBOL, Colors::BLACK);
    display->draw_string(110, 1, "CHG", Colors::BLACK);
  }
}

void run_display(void *param) {
  while (1) {

    Display_Param *dp = (Display_Param *)param;

    if (dp->current_menu == NULL) {
      main_menu(param);
    } else {
      dp->current_menu->function(dp->current_menu->param);
    }
  }
}

void main_menu(void *param) {

  Display_Param *dp = (Display_Param *)param;
  GFX *gfx = (GFX *)dp->display->gfx;
  static int8_t menu_index = 0;
  const char *menu_items[] = {"Kinematics",      "Dynamics", "Gravity",
                              "Fluid Mechanics", "Sound",    "Energy",
                              "Setting"};

  static Task menus[] = {{kinematics_menu, param}, {dynamics_menu, param},
                         {gravity_menu, param},    {fluid_menu, param},
                         {sound_menu, param},      {energy_menu, param},
                         {setting_menu, param}};

  const uint8_t menu_length = 7;

  if (isKeyPressed(KEY_UP, dp, millis())) {
    menu_index--;
    if (menu_index < 0)
      menu_index = menu_length - 1;
  } else if (isKeyPressed(KEY_DOWN, dp, millis())) {
    menu_index++;
    if (menu_index >= menu_length)
      menu_index = 0;
  } else if (isKeyPressed(KEY_RIGHT, dp, millis())) {
    dp->current_menu = menus + menu_index;
  }

  // Determine which menu items to show (scroll if needed)
  uint8_t start_index = 0;
  if (menu_index >= VISIBLE_MENU_ITEMS)
    start_index = menu_index - VISIBLE_MENU_ITEMS + 1;

  gfx->clear();
  draw_status_bar(gfx, "Main Menu");

  for (uint8_t i = 0; i < VISIBLE_MENU_ITEMS; i++) {
    uint8_t item_index = start_index + i;
    if (item_index >= menu_length)
      break;

    gfx->draw_string(0, 12 + i * 10,
                     std::string((item_index == menu_index) ? "> " : " ") +
                         std::string(menu_items[item_index]),
                     Colors::WHITE);
  }

  gfx->display();
}
